buildscript {
    // For sharing constants between builds
    Properties constants = new Properties()
    file("$projectDir/constants.properties").withInputStream { constants.load(it) }

    // Our version: bump this on release.
    ext.corda_release_version = "5.0-vnpay"
    ext.corda_platform_version = constants.getProperty("platformVersion")
    ext.gradle_plugins_version = constants.getProperty("gradlePluginsVersion")

    // Dependency versions. Can run 'gradle dependencyUpdates' to find new versions of things.
    //
    // TODO: Sort this alphabetically.
    ext{
        kotlin_version = '1.3.20'
        proguard_version = constants.getProperty('proguardVersion')
        dokka_version = '0.9.17'
        eddsa_version = '0.2.0'
        dependency_checker_version = '4.0.0'
        artifactory_plugin_version = constants.getProperty('artifactoryPluginVersion')
        guava_version = constants.getProperty("guavaVersion")
        typesafe_config_version = constants.getProperty("typesafeConfigVersion")
        hamkrest_version = '1.4.2.2'
        jsr305_version = constants.getProperty("jsr305Version")
        slf4j_version = '1.7.25'
        caffeine_version = constants.getProperty("caffeineVersion")
        rxjava_version = '1.3.8'
        bouncycastle_version = constants.getProperty("bouncycastleVersion")
        hibernate_version = '5.3.6.Final'
        class_graph_version = '4.6.12'

        //Serialization
        artemis_version = '2.6.4'
        asm_version = '5.0.4'
        protonj_version = '0.27.1'
        snappy_version = '0.4'
        netty_version = '4.1.22.Final'

        slf4j_version = '1.7.25'
        log4j_version = '2.9.1'
        hibernate_version = '5.3.6.Final'

        //node - API
        commons_collections_version = '4.1'
        beanutils_version = '1.9.3'
        fileupload_version = '1.3.3'
        liquibase_version = '3.5.5'
        jackson_version = '2.9.5'
        junit_version = '4.12'
        assertj_version = '3.8.0'
        bouncycastle_version = constants.getProperty("bouncycastleVersion")
        guava_version = constants.getProperty("guavaVersion")

        //Node
        quasar_version = '0.7.10'
        disruptor_version = constants.getProperty("disruptorVersion")
        jcabi_manifests_version = '1.1'
        metrics_version = constants.getProperty("metricsVersion")
        h2_version = '1.4.197' // Update docs if renamed ojsr305_versionr removed.
        postgresql_version = '42.2.5'
        capsule_version = '1.0.3'
        okhttp_version = '3.5.0'
        shiro_version = '1.4.0'
        picocli_version = '3.8.0'
        eaagentloader_version = '1.0.3'
        metrics_new_relic_version = constants.getProperty("metricsNewRelicVersion")

        //Toolshell-utils
        commons_io_version = '2.6'
        jansi_version = '1.14'
        //Tool-
        crash_version = 'cadb53544fbb3c0fb901445da614998a6a419488'
    }


    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://kotlin.bintray.com/kotlinx'
        }
        maven { url 'https://jitpack.io' }

    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'


        classpath fileTree(dir: 'gradle-plugins',includes: ['*.jar'])


        classpath "net.sf.proguard:proguard-gradle:$proguard_version"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "net.i2p.crypto:eddsa:$eddsa_version" // Needed for ServiceIdentityGenerator in the build environment.
        classpath "org.owasp:dependency-check-gradle:${dependency_checker_version}"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:$artifactory_plugin_version"
    }
}



plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'

    // Add the shadow plugin to the plugins classpath for the entire project.
    id 'com.github.johnrengelman.shadow' version '2.0.4' apply false
    id "com.gradle.build-scan" version "1.16"
}


apply plugin: 'project-report'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'net.corda.plugins.publish-utils'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'java'

group 'vnpay-tools'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8


allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'kotlin-allopen'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:-options" << "-parameters"
        options.encoding = 'UTF-8'
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.3"
            apiVersion = "1.3"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs = ['-Xjvm-default=compatibility']
            allWarningsAsErrors = project.hasProperty('compilation.allWarningsAsErrors') ? project.property('compilation.allWarningsAsErrors').toBoolean() : false
        }
    }
    configurations {
        all {
            resolutionStrategy {
                // Force dependencies to use the same version of Kotlin as Corda.
                force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
                force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

                // Force dependencies to use the same version of Guava as Corda.
                force "com.google.guava:guava:$guava_version"

                // Demand that everything uses our given version of Netty.
                eachDependency { details ->
                    if (details.requested.group == 'io.netty' && details.requested.name.startsWith('netty-')) {
                        details.useVersion netty_version
                    }
                }
            }
        }
        compile {
            // We want to use SLF4J's version of these bindings: jcl-over-slf4j
            // Remove any transitive dependency on Apache's version.
            exclude group: 'commons-logging', module: 'commons-logging'
            // Remove any transitive dependency on Logback (e.g. Liquibase 3.6 introduces this dependency)
            exclude group: 'ch.qos.logback'

            // Netty-All is an uber-jar which contains every Netty module.
            // Exclude it to force us to use the individual Netty modules instead.
            exclude group: 'io.netty', module: 'netty-all'
        }
        runtime {
            // We never want isolated.jar on classPath, since we want to test jar being dynamically loaded as an attachment
            exclude module: 'isolated'
        }
    }
}


jar {
    // Prevent the root project from building an unwanted dummy CorDapp.
    enabled = true
}
repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}